{"version":3,"sources":["../../src/components/Page.js","../../src/hooks/useIsMountedRef.js","../../src/utils/helpError.js","../../src/components/authentication/reset-password/ResetPasswordForm.js","../../src/views/authentication/ResetPassword.js"],"names":["Page","forwardRef","children","title","other","ref","propTypes","PropTypes","node","isRequired","string","useIsMountedRef","isMounted","useRef","useEffect","current","emailAlreadyinUse","invalidEmail","businessEmail","userDisabled","userNotFound","wrongPassword","weakPassword","code","text","emailError","errors","error","helperText","passwordError","ResetPasswordForm","onSent","onGetEmail","isMountedRef","ResetPasswordSchema","Yup","shape","email","required","formik","useFormik","initialValues","validationSchema","onSubmit","async","values","setErrors","setSubmitting","afterSubmit","touched","isSubmitting","handleSubmit","getFieldProps","value","autoComplete","noValidate","TextField","fullWidth","type","label","Boolean","sx","mb","LoadingButton","size","variant","color","pending","RootStyle","styled","theme","display","minHeight","alignItems","justifyContent","padding","spacing","HeaderStyle","top","left","width","position","breakpoints","up","ResetPassword","setEmail","useState","sent","setSent","to","Logo","Container","Box","maxWidth","mx","textAlign","component","alt","src","Typography","gutterBottom","Button","RouterLink","PATH_AUTH","login","mt"],"mappings":"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","file":"static/js/32.ad731519.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { forwardRef } from 'react';\r\n// material\r\nimport { Box } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst Page = forwardRef(({ children, title = '', ...other }, ref) => (\r\n  <Box ref={ref} {...other}>\r\n    <Helmet>\r\n      <title>{title}</title>\r\n    </Helmet>\r\n    {children}\r\n  </Box>\r\n));\r\n\r\nPage.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string\r\n};\r\n\r\nexport default Page;\r\n","import { useRef, useEffect } from 'react';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function useIsMountedRef() {\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      isMounted.current = false;\r\n    },\r\n    []\r\n  );\r\n\r\n  return isMounted;\r\n}\r\n","// ----------------------------------------------------------------------\r\n\r\nexport const codes = {\r\n  // Email\r\n  emailAlreadyinUse: {\r\n    code: 'auth/email-already-in-use',\r\n    text: 'There already exists an account with the given email address.'\r\n  },\r\n  invalidEmail: {\r\n    code: 'auth/invalid-email',\r\n    text: 'The email address is not valid.'\r\n  },\r\n  businessEmail: {\r\n    code: 'auth/business-email',\r\n    text: 'Please enter a business email address, your email is not valid.'\r\n  },\r\n  userDisabled: {\r\n    code: 'auth/user-disabled',\r\n    text: 'The user corresponding to the given credential has been disabled.'\r\n  },\r\n  userNotFound: {\r\n    code: 'auth/user-not-found',\r\n    text: 'There is no user corresponding to the email address.'\r\n  },\r\n\r\n  // Password\r\n  wrongPassword: {\r\n    code: 'auth/wrong-password',\r\n    text: 'Wrong password'\r\n  },\r\n  weakPassword: {\r\n    code: 'auth/weak-password',\r\n    text: 'Password should be at least 6 characters'\r\n  }\r\n};\r\n\r\nconst {\r\n  emailAlreadyinUse,\r\n  invalidEmail,\r\n  businessEmail,\r\n  userDisabled,\r\n  userNotFound,\r\n  wrongPassword,\r\n  weakPassword\r\n} = codes;\r\n\r\nexport function emailError(errors) {\r\n  return {\r\n    error:\r\n      errors === emailAlreadyinUse.code ||\r\n      errors === businessEmail.code ||\r\n      errors === invalidEmail.code ||\r\n      errors === userDisabled.code ||\r\n      errors === userNotFound.code,\r\n    helperText:\r\n      (errors === emailAlreadyinUse.code && emailAlreadyinUse.text) ||\r\n      (errors === businessEmail.code && businessEmail.text) ||\r\n      (errors === invalidEmail.code && invalidEmail.text) ||\r\n      (errors === userDisabled.code && userDisabled.text) ||\r\n      (errors === userNotFound.code && userNotFound.text)\r\n  };\r\n}\r\n\r\nexport function passwordError(errors) {\r\n  return {\r\n    error: errors === wrongPassword.code || errors === weakPassword.code,\r\n    helperText:\r\n      (errors === wrongPassword.code && wrongPassword.text) ||\r\n      (errors === weakPassword.code && weakPassword.text)\r\n  };\r\n}\r\n","import * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n// material\r\nimport { TextField } from '@material-ui/core';\r\nimport { LoadingButton } from '@material-ui/lab';\r\n// hooks\r\n// import useAuth from '../../../hooks/useAuth';\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n// utils\r\nimport { emailError } from '../../../utils/helpError';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nResetPasswordForm.propTypes = {\r\n  onSent: PropTypes.func,\r\n  onGetEmail: PropTypes.func\r\n};\r\n\r\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\r\n  // const { resetPassword } = useAuth();\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email('Email must be a valid email address')\r\n      .required('Email is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: 'test@thimble.com'\r\n    },\r\n    validationSchema: ResetPasswordSchema,\r\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\r\n      try {\r\n        // await resetPassword(values.email);\r\n        if (isMountedRef.current) {\r\n          onSent();\r\n          onGetEmail(formik.values.email);\r\n          setSubmitting(false);\r\n        }\r\n      } catch (error) {\r\n        if (isMountedRef.current) {\r\n          setErrors({ afterSubmit: error.code });\r\n          setSubmitting(false);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <TextField\r\n          fullWidth\r\n          {...getFieldProps('email')}\r\n          type=\"email\"\r\n          label=\"Email address\"\r\n          error={\r\n            Boolean(touched.email && errors.email) ||\r\n            emailError(errors.afterSubmit).error\r\n          }\r\n          helperText={\r\n            (touched.email && errors.email) ||\r\n            emailError(errors.afterSubmit).helperText\r\n          }\r\n          sx={{ mb: 3 }}\r\n        />\r\n        <LoadingButton\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          pending={isSubmitting}\r\n        >\r\n          Reset Password\r\n        </LoadingButton>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n// material\r\nimport { experimentalStyled as styled } from '@material-ui/core/styles';\r\nimport { Box, Button, Container, Typography } from '@material-ui/core';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n// components\r\nimport Logo from '../../components/Logo';\r\nimport Page from '../../components/Page';\r\nimport { ResetPasswordForm } from '../../components/authentication/reset-password';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Page)(({ theme }) => ({\r\n  display: 'flex',\r\n  minHeight: '100%',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  padding: theme.spacing(12, 0)\r\n}));\r\n\r\nconst HeaderStyle = styled('header')(({ theme }) => ({\r\n  top: 0,\r\n  left: 0,\r\n  width: '100%',\r\n  position: 'absolute',\r\n  padding: theme.spacing(3),\r\n  [theme.breakpoints.up('sm')]: {\r\n    padding: theme.spacing(5)\r\n  }\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ResetPassword() {\r\n  const [email, setEmail] = useState('');\r\n  const [sent, setSent] = useState(false);\r\n\r\n  return (\r\n    <RootStyle title=\"Thimble | Reset Password\">\r\n      <HeaderStyle>\r\n        <RouterLink to=\"/\">\r\n          <Logo />\r\n        </RouterLink>\r\n      </HeaderStyle>\r\n\r\n      <Container>\r\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\r\n          {!sent ? (\r\n            <>\r\n              <Typography variant=\"h3\" gutterBottom>\r\n                Forgot your password?\r\n              </Typography>\r\n              <Typography sx={{ color: 'text.secondary', mb: 5 }}>\r\n                Please enter the email address associated with your account and\r\n                We will email you a link to reset your password.\r\n              </Typography>\r\n\r\n              <ResetPasswordForm\r\n                onSent={() => setSent(true)}\r\n                onGetEmail={(value) => setEmail(value)}\r\n              />\r\n\r\n              <Button\r\n                fullWidth\r\n                size=\"large\"\r\n                component={RouterLink}\r\n                to={PATH_AUTH.login}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                Back\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <Box sx={{ textAlign: 'center' }}>\r\n              <Box\r\n                component=\"img\"\r\n                alt=\"sent email\"\r\n                src=\"/static/icons/ic_email_sent.svg\"\r\n                sx={{ mb: 5, mx: 'auto' }}\r\n              />\r\n              <Typography variant=\"h3\" gutterBottom>\r\n                Request sent successfully\r\n              </Typography>\r\n              <Typography>\r\n                We have sent a confirmation email to &nbsp;\r\n                <strong>{email}</strong>\r\n                <br />\r\n                Please check your email.\r\n              </Typography>\r\n\r\n              <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                component={RouterLink}\r\n                to={PATH_AUTH.login}\r\n                sx={{ mt: 5 }}\r\n              >\r\n                Back\r\n              </Button>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Container>\r\n    </RootStyle>\r\n  );\r\n}\r\n"],"sourceRoot":""}